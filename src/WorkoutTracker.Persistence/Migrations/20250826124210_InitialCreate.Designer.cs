// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkoutTracker.Persistence;

#nullable disable

namespace WorkoutTracker.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250826124210_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorkoutTracker.Domain.Exercises.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("TargetMuscle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TargetMuscle");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Exercises", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Measurements.Measurement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<int>("Unit")
                        .HasColumnType("int")
                        .HasColumnName("Unit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Measurements", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Measurements.MeasurementData", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("MeasuredOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("MeasuredOn");

                    b.Property<Guid>("MeasurementId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MeasurementId");

                    b.Property<float>("Value")
                        .HasColumnType("real")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementId");

                    b.ToTable("MeasurementData", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Routines.Routine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Routines", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Routines.RoutineExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Comment");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExerciseId");

                    b.Property<byte>("Position")
                        .HasColumnType("tinyint")
                        .HasColumnName("Position");

                    b.Property<byte>("RepCount")
                        .HasColumnType("tinyint")
                        .HasColumnName("RepCount");

                    b.Property<TimeSpan>("RestTimeBetweenSets")
                        .HasColumnType("time")
                        .HasColumnName("RestTimeBetweenSets");

                    b.Property<Guid>("RoutineId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoutineId");

                    b.Property<byte>("SetCount")
                        .HasColumnType("tinyint")
                        .HasColumnName("SetCount");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("RoutineId");

                    b.ToTable("RoutineExercises", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BirthDate");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .HasColumnName("Email");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Users.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndTime");

                    b.Property<TimeSpan>("RestTimeBetweenExercises")
                        .HasColumnType("time")
                        .HasColumnName("RestTimeBetweenExercises");

                    b.Property<Guid>("RoutineId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoutineId");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartTime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoutineId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Workouts", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Exercises.Exercise", b =>
                {
                    b.HasOne("WorkoutTracker.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Measurements.Measurement", b =>
                {
                    b.HasOne("WorkoutTracker.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Measurements.MeasurementData", b =>
                {
                    b.HasOne("WorkoutTracker.Domain.Measurements.Measurement", null)
                        .WithMany("Data")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Routines.Routine", b =>
                {
                    b.HasOne("WorkoutTracker.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Routines.RoutineExercise", b =>
                {
                    b.HasOne("WorkoutTracker.Domain.Exercises.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutTracker.Domain.Routines.Routine", null)
                        .WithMany("RoutineExercises")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Users.User", b =>
                {
                    b.OwnsMany("WorkoutTracker.Domain.Exercises.TypedIds.ExerciseId", "ExerciseIds", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("IdValue")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ExerciseId");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("UserExerciseIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("WorkoutTracker.Domain.Measurements.TypedIds.MeasurementId", "MeasurementIds", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("IdValue")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("MeasurementId");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("UserMeasurementIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("WorkoutTracker.Domain.Routines.TypedIds.RoutineId", "RoutineIds", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("IdValue")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("RoutineId");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("UserRoutineIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("WorkoutTracker.Domain.Users.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("ExerciseIds");

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("MeasurementIds");

                    b.Navigation("RoutineIds");
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Users.Workout", b =>
                {
                    b.HasOne("WorkoutTracker.Domain.Routines.Routine", null)
                        .WithMany()
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutTracker.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutTracker.Domain.Users.User", null)
                        .WithMany("Workouts")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Measurements.Measurement", b =>
                {
                    b.Navigation("Data");
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Routines.Routine", b =>
                {
                    b.Navigation("RoutineExercises");
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Users.User", b =>
                {
                    b.Navigation("Workouts");
                });
#pragma warning restore 612, 618
        }
    }
}
